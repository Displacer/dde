#include "dde_server.h"
#include <cstring>

using std::string;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           DDE::DDE(string Serv)
//  Назначение:    Конструктор класса (выделяет память под имя сервиса)
//  Вход:          строка с именем сервиса
//  Выход:         нет
//  Примечание:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
DDE::DDE(string Serv):idInst(0), hszService(NULL)
{
	chService = Serv;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           DDE::DDE()
//  Назначение:    Конструктор без параметров
//  Вход:          нет
//  Выход:         нет
//  Примечание:    После необходимо провести инициализацию объекта при помощи функции DdeInit
////////////////////////////////////////////////////////////////////////////////////////////////////////////
DDE::DDE():idInst(0), hszService(NULL)
{
	chService = "";
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           DDE::DdeInit(string Serv)
//  Назначение:    Метод выделяет память под имя сервиса
//  Вход:          строка с именем сервиса
//  Выход:         нет
//  Примечание:    применяется в связке с конструктором без параметров для инициализации класса    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DDE::DdeInit(string Serv)
{
	chService = Serv;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           DDE::~DDE()
//  Назначение:    Деструктор класса (очищает все используемые ресурсы)
//  Вход:          нет
//  Выход:         нет
//  Примечание:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
DDE::~DDE()
{
    Disconnect();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           void DDE::Disconnect()
//  Назначение:    Отменяет регистрацию сервиса в библиотеке DDEML
//  Вход:          указатель на функцию обратного выова
//  Выход:         1 - в случае ошибки, 0 - в случае успеха
//  Примечание:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void DDE::Disconnect()
{
	if (idInst)
	{
		DdeNameService(idInst, hszService, (HSZ)NULL, DNS_UNREGISTER);
		if(hszService) DdeFreeStringHandle(idInst, hszService);
		DdeUninitialize(idInst);
		idInst = 0;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           bool DDE::Connect(CallBack DdeCallback)
//  Назначение:    Регистрирует сервис в DDEML библиотеке и проводит инициализацию
//  Вход:          указатель на функцию обратного выова
//  Выход:         1 - в случае ошибки, 0 - в случае успеха
//  Примечание:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool DDE::Connect(CallBack DdeCallback)
{
	if(!RegisterClipboardFormatA((LPSTR)"XlTable")) return false;
	// Инициализация DDEML библиотеки
	if(DdeInitialize(&idInst, DdeCallback, APPCLASS_STANDARD, 0)) return false;
	
	// Получение идентификаторов строк для сервиса, раздела и элемента данных
	hszService = DdeCreateStringHandleA(idInst, chService.c_str(), CP_WINANSI);
	
	if(hszService == 0) return false;
	// Регистрация сервиса
	if(!DdeNameService(idInst, hszService, NULL, DNS_REGISTER)) return false;

	return true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           HSZ DDE::GetName()
//  Назначение:    Возвращает имя зарегистрированного сервиса
//  Вход:          нет
//  Выход:         имя сервиса либо NULL
//  Примечание:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
HSZ DDE::GetName()
{
	return hszService;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Имя:           DWORD DDE::GetId()
//  Назначение:    Возвращает идентификатор зарегистрированного сервиса
//  Вход:          нет
//  Выход:         идентификатор сервиса
//  Примечание:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD DDE::GetId()
{
	return idInst;
}