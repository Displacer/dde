#include "command_line_parser.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::CommandLineParser(int argc,char *argv[])
//  ����������:    ����������� ������ � �����������(��������� ������ ���������� ��������� ������)
//  ����:          ��������� ������� main
//  �����:         ���
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
CommandLineParser::CommandLineParser(int argc,char *argv[])
{
	string str;
	size_t found;
	service = "excel";
	col_deliver = ";";
	row_deliver = "\n";
	data_deliver = "";
	topit_deliver = "";

	if (argc == 1)	// ���� ���������� �� ����, �� ���������� �������� �� ���������
	{
		status = CML_OK;
		return;
	}

	for (int i = 1; i < argc; i++)	// ���� �������� ����������
	{
		str = argv[i];

		if (!str.compare("-h"))	// ���� ���������� �������� -h, �� ������� ������
		{
			status = CML_HELP;
			return;
		}

		if (!str.compare("-s"))	// ���� ���������� �������� -s, �� ���������
		{						// �� ��� �������� ���� ��� �������
			i++;
			service = argv[i];
			while (1)	// �������� ������� "\t" �� 1 ������ '\t' (���� ����������� � �����)
			{
				found = service.find("\\t");
				if (found == string::npos) break;
				service.replace(found,2,1,'\t');
			}
			while (1)	// �������� ������� "\n" �� 1 ������ '\n' (���� ����������� � �����)
			{
				found = service.find("\\n");
				if (found == string::npos) break;
				service.replace(found,2,1,'\n');
			}
			continue;
		}

		if (!str.compare("-f"))	// ���� ���������� �������� -f, �� ���������
		{						// �� ��� �������� ���� ����������� ��������
			i++;
			col_deliver = argv[i];
			while (1)	// �������� ������� "\t" �� 1 ������ '\t' (���� ����������� � �����)
			{
				found = col_deliver.find("\\t");
				if (found == string::npos) break;
				col_deliver.replace(found,2,1,'\t');
			}
			while (1)	// �������� ������� "\n" �� 1 ������ '\n' (���� ����������� � �����)
			{
				found = col_deliver.find("\\n");
				if (found == string::npos) break;
				col_deliver.replace(found,2,1,'\n');
			}
			continue;
		}

		if (!str.compare("-n"))	// ���� ���������� �������� -n, �� ���������
		{						// �� ��� �������� ���� ����������� �����
			i++;
			row_deliver = argv[i];
			while (1)	// �������� ������� "\t" �� 1 ������ '\t' (���� ����������� � �����)
			{
				found = row_deliver.find("\\t");
				if (found == string::npos) break;
				row_deliver.replace(found,2,1,'\t');
			}
			while (1)	// �������� ������� "\n" �� 1 ������ '\n' (���� ����������� � �����)
			{
				found = row_deliver.find("\\n");
				if (found == string::npos) break;
				row_deliver.replace(found,2,1,'\n');
			}
			continue;
		}

		if (!str.compare("-d"))	// ���� ���������� �������� -d, �� ���������
		{						// �� ��� �������� ���� ����������� ������ ������
			i++;
			data_deliver = argv[i];
			while (1)	// �������� ������� "\t" �� 1 ������ '\t' (���� ����������� � �����)
			{
				found = data_deliver.find("\\t");
				if (found == string::npos) break;
				data_deliver.replace(found,2,1,'\t');
			}
			while (1)	// �������� ������� "\n" �� 1 ������ '\n' (���� ����������� � �����)
			{
				found = data_deliver.find("\\n");
				if (found == string::npos) break;
				data_deliver.replace(found,2,1,'\n');
			}
			continue;
		}

		if (!str.compare("-t"))	// ���� ���������� �������� -t, �� ���������
		{						// �� ��� �������� ���� ����������� ������ ������ ������
			i++;
			topit_deliver = argv[i];
			while (1)	// �������� ������� "\t" �� 1 ������ '\t' (���� ����������� � �����)
			{
				found = topit_deliver.find("\\t");
				if (found == string::npos) break;
				topit_deliver.replace(found,2,1,'\t');
			}
			while (1)	// �������� ������� "\n" �� 1 ������ '\n' (���� ����������� � �����)
			{
				found = topit_deliver.find("\\n");
				if (found == string::npos) break;
				topit_deliver.replace(found,2,1,'\n');
			}
			continue;
		}

		status = CML_HELP;	// ���� ���������� ����������� ��������, �� ������ ������
		return;
	}
	status = CML_OK;	// � ������ ������ ������������� ������������� ������
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::CommandLineParser()
//  ����������:    ����������� ������ ��� ����������(�������������� ���� ���������� �� ���������)
//  ����:          ���
//  �����:         ���
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
CommandLineParser::CommandLineParser()
{
	service = "excel";
	col_deliver = ";";
	row_deliver = "\n";
	data_deliver = "";
	topit_deliver = "";
	status = CML_OK;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::GetServiceName()
//  ����������:    ���������� ��� �������
//  ����:          ���
//  �����:         ��� �������
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
string CommandLineParser::GetServiceName() {return service;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::GetColDeliver()
//  ����������:    ���������� ����������� ������� �������
//  ����:          ���
//  �����:         ����������� ������� �������
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
string CommandLineParser::GetColDeliver() {return col_deliver;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::GetRowDeliver()
//  ����������:    ���������� ����������� ����� �������
//  ����:          ���
//  �����:         ����������� ����� �������
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
string CommandLineParser::GetRowDeliver() {return row_deliver;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::GetDataDeliver()
//  ����������:    ���������� ����������� ������ �������
//  ����:          ���
//  �����:         ����������� ������ �������
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
string CommandLineParser::GetDataDeliver() {return data_deliver;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::GetTopItDeliver()
//  ����������:    ���������� ����������� ������ ������ ������
//  ����:          ���
//  �����:         ����������� ������ ������ ������
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
string CommandLineParser::GetTopItDeliver() {return topit_deliver;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::GetStatus()
//  ����������:    ���������� ������ �������
//  ����:          ���
//  �����:         ������ �������
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
status_type CommandLineParser::GetStatus() {return status;}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ���:           CommandLineParser::Help()
//  ����������:    ������� ������ �� ������������� �������
//  ����:          ���
//  �����:         ���
//  ����������:    
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CommandLineParser::Help()
{
	cout<<"\n|================================================================================|\n";
	cout<<"|| ������ ������� Dde-�������:                                                  ||\n";
	cout<<"|| Dde_server [��������1 [��������1]]...[��������N [��������N]]                 ||\n";
	cout<<"|================================================================================|\n"; 
	cout<<"|| ���������� ���������:                                                        ||\n";
	cout<<"|| -h - ������ �� ������������� Dde-�������;                                    ||\n";
	cout<<"|| -s - ������ ��� ������� (��������: Dde_server -s \"MyService\").               ||\n";
	cout<<"||      �������� �� ���������: \"excel\"                                          ||\n";
	cout<<"|| -f - ������ ����������� �������� (��������: Dde_server -f \"_ _\").            ||\n";
	cout<<"||      �������� �� ���������: \";\"                                              ||\n";
	cout<<"|| -n - ������ ����������� ����� (��������: Dde_server -n \"new:\").              ||\n";
	cout<<"||      �������� �� ���������: \"\\n\"                                             ||\n";
	cout<<"|| -d - ������ ����������� ����� �������� ������ (��������: Dde_server -d \"---\".||\n";
	cout<<"||      �������� �� ���������: \"\" (�.�. ��� �����������)                        ||\n";
	cout<<"|| -t - ���� ������, �� ������������ ����� ������ �������� ��������             ||\n";
	cout<<"||      ��� ������ � ����� � �������� ������������.                             ||\n";
	cout<<"||      ���� �� ������, �� ������������ �� �������� ����� ����� ������ �������. ||\n";
	cout<<"||      (��������: Dde_server -t \"- \").                                         ||\n";
	cout<<"||      �������� �� ���������: \"\" (�.�. ��� �����������)                        ||\n";
	cout<<"|================================================================================|\n";
}